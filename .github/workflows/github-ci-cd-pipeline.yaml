name: CI/CD Pipeline with Mixed SSH Authentication

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: flask-app
  FLASK_ENV: production

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Set test environment variables
      run: |
        echo "FLASK_SECRET_KEY=test-secret-key-for-github-actions-$(date +%s)" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Debug Docker Hub credentials
      run: |
        echo "DOCKERHUB_USERNAME: '$DOCKERHUB_USERNAME'"
        echo "DOCKER_IMAGE_NAME: '$DOCKER_IMAGE_NAME'"
        echo "Full image tag would be: $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest"
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        echo "Building Docker image..."
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        
        echo "Pushing Docker images..."
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
        echo "✅ Build and push completed successfully!"

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check required secrets
      run: |
        echo "Checking if all required secrets are set..."
        echo "BASTION_HOST: ${{ secrets.BASTION_HOST }}"
        echo "BASTION_USERNAME: ${{ secrets.BASTION_USERNAME }}"
        echo "EC2_SSH_KEY length: ${#EC2_SSH_KEY}"
        echo "EC2_USERNAME: ${{ secrets.EC2_USERNAME }}"
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
    
    - name: Deploy to EC2 via Bastion
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.BASTION_HOST }}
        username: ${{ secrets.BASTION_USERNAME }}
        key: ${{ secrets.BASTION_SSH_KEY }}
        script: |
          echo "🚀 Starting deployment through Bastion host..."
          echo "Bastion host: ${{ secrets.BASTION_HOST }}"
          echo "Target EC2: ${{ secrets.EC2_HOST }}"
          
          cat > /tmp/ec2_deploy_key << 'KEY_EOF'
          ${{ secrets.EC2_SSH_KEY }}
          KEY_EOF
          
          chmod 600 /tmp/ec2_deploy_key
          
          echo "Testing connection to target EC2..."
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_deploy_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo '✅ Connected to target EC2 successfully'"
          
          echo "Executing deployment commands on target EC2..."
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_deploy_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'DEPLOY_EOF'
          echo "📦 Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          echo "🛑 Stopping existing container..."
          docker stop flask-app 2>/dev/null || true
          docker rm flask-app 2>/dev/null || true
          
          echo "🐳 Starting new container..."
          docker run -d \
            -p 5000:5000 \
            -e FLASK_SECRET_KEY='${{ secrets.FLASK_SECRET_KEY }}' \
            -e FLASK_ENV='${{ env.FLASK_ENV }}' \
            --name flask-app \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          echo "⏳ Waiting for application to start..."
          # 增加应用健康检查，确保应用真正启动
          for i in {1..10}; do
            if curl -s --retry 3 --retry-delay 2 http://localhost:5000/api/health > /dev/null 2>&1; then
              echo "✅ Application health check passed!"
              break
            fi
            echo "Attempt $i/10: Application not ready yet..."
            sleep 5
            if [ $i -eq 10 ]; then
              echo "❌ Application failed to start within 50 seconds"
              echo "📝 Application logs:"
              docker logs flask-app || echo "No logs available"
              exit 1
            fi
          done
          
          echo "✅ Deployment completed!"
          echo "📊 Container status:"
          docker ps -a --filter "name=flask-app"
          
          echo "📝 Application logs (last 20 lines):"
          docker logs flask-app --tail 20 2>/dev/null || echo "No logs available yet"
          
          echo "🌐 Final health check:"
          curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost:5000/api/health || echo "Health check failed"
          DEPLOY_EOF
          
          rm -f /tmp/ec2_deploy_key
          
          echo "🎉 Deployment through Bastion finished successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-to-ec2]
    if: always()

    steps:
    - name: Determine deployment status
      id: check-status
      run: |
        if [ "${{ needs.deploy-to-ec2.result }}" = "success" ]; then
          echo "STATUS=success" >> $GITHUB_OUTPUT
          echo "MESSAGE=✅ CI/CD Pipeline completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "STATUS=failure" >> $GITHUB_OUTPUT
          echo "MESSAGE=❌ CI/CD Pipeline failed! Check job logs for details." >> $GITHUB_OUTPUT
        fi

    - name: Notify deployment status
      run: |
        echo "${{ steps.check-status.outputs.MESSAGE }}"
        echo "📦 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "🌐 Deployed to EC2: ${{ secrets.EC2_HOST }}"
        echo "🚀 Application is now running on: ${{ secrets.EC2_HOST }}:5000"
        
        if [ "${{ steps.check-status.outputs.STATUS }}" = "success" ]; then
          echo "🎉 Application deployment completed successfully!"
          echo "🔗 Access URL: http://${{ secrets.EC2_HOST }}:5000"
        else
          echo "💥 Deployment failed"
          exit 1
        fi