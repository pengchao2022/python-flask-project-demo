name: CI/CD Pipeline with Mixed SSH Authentication

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: flask-app
  FLASK_ENV: production

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Set test environment variables
      run: |
        echo "FLASK_SECRET_KEY=test-secret-key-for-github-actions-$(date +%s)" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to EC2 via Bastion with SSH Key
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.BASTION_HOST }}
        username: ${{ secrets.BASTION_USERNAME }}
        # 不使用 key 参数，因为Bastion使用已配置的公钥认证
        script: |
          echo "🚀 Starting deployment through Bastion host..."
          
          # 在Bastion上创建临时SSH密钥文件用于连接目标EC2
          cat > /tmp/ec2_deploy_key << 'KEY_EOF'
          ${{ secrets.EC2_SSH_KEY }}
          KEY_EOF
          
          # 设置密钥文件权限
          chmod 600 /tmp/ec2_deploy_key
          
          # 通过Bastion跳转到目标EC2执行部署命令
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_deploy_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'DEPLOY_EOF'
          # 在目标EC2上执行部署命令
          echo "📦 Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          echo "🛑 Stopping existing container..."
          docker stop flask-app || true
          docker rm flask-app || true
          
          echo "🐳 Starting new container..."
          docker run -d \
            -p 5000:5000 \
            -e FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            --name flask-app \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          echo "⏳ Waiting for application to start..."
          sleep 10
          
          echo "✅ Deployment completed!"
          echo "📊 Container status:"
          docker ps -a --filter "name=flask-app"
          
          echo "📝 Application logs (last 10 lines):"
          docker logs flask-app --tail 10
          
          echo "🌐 Health check:"
          curl -s http://localhost:5000/api/health || echo "Health check failed - application may still be starting"
          DEPLOY_EOF
          
          # 清理Bastion上的临时密钥文件
          rm -f /tmp/ec2_deploy_key
          
          echo "🎉 Deployment through Bastion finished successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "📦 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "🌐 Deployed to private EC2 via Bastion: ${{ secrets.BASTION_HOST }}"
        else
          echo "❌ CI/CD Pipeline failed!"
          echo "📋 Please check the workflow logs for details."
          exit 1
        fi