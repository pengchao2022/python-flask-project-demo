name: Full Automated CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: flask-app
  FLASK_ENV: production

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Set test environment variables
      run: |
        echo "FLASK_SECRET_KEY=test-secret-key-for-github-actions-$(date +%s)" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
    - name: Push Docker images
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
    - name: Log out from Docker Hub
      run: docker logout

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Starting automated deployment..."
          echo "Deploying commit: ${{ github.sha }}"
          
          # 拉取最新镜像
          echo "📦 Pulling latest Docker image..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # 停止并删除现有容器
          echo "🛑 Stopping existing container..."
          docker stop flask-app || true
          docker rm flask-app || true
          
          # 运行新容器
          echo "🐳 Starting new container..."
          docker run -d \
            -p 5000:5000 \
            -e FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
            -e FLASK_ENV=${{ env.FLASK_ENV }} \
            --name flask-app \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # 等待应用启动
          echo "⏳ Waiting for application to start..."
          sleep 10
          
          # 检查部署状态
          echo "✅ Deployment completed!"
          echo "📊 Container status:"
          docker ps -a --filter "name=flask-app"
          
          echo "📝 Application logs (last 10 lines):"
          docker logs flask-app --tail 10
          
          echo "🌐 Health check:"
          curl -s http://localhost:5000/api/health || echo "Health check failed - application may still be starting"
          
          echo "🎉 Automated deployment finished successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "📦 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "🌐 Deployed to: ${{ secrets.EC2_HOST }}:5000"
        else
          echo "❌ CI/CD Pipeline failed!"
          echo "📋 Please check the workflow logs for details."
          exit 1
        fi
